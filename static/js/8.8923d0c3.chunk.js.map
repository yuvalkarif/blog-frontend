{"version":3,"sources":["helpers/api.js","components/PostMDE/PostMDE.styles.js","components/PostMDE/index.js"],"names":["url","process","getPosts","a","axios","get","posts","data","getPostByID","postID","post","createComment","comment","username","body","deleteComment","commentID","user","token","delete","headers","authorization","handleLogin","password","Error","updatePost","img","title","id","put","encodeURIComponent","author","thumbnail","createPost","deletePost","Wrapper","styled","section","theme","mainColor","bgColor","shadowColor","blockColor","titleColor","Submit","button","accentColor","PostMDE","useParams","useState","value","setValue","setTitle","setThumbnail","useUserContext","history","useHistory","useEffect","results","decodeURIComponent","setup","handleSubmit","console","log","then","res","push","_id","htmlFor","type","placeholder","name","onChange","e","target","onClick"],"mappings":"ubACaA,EAEPC,uCAGOC,EAAQ,uCAAG,4BAAAC,EAAA,+EAGNC,IAAMC,IAAN,UAAaL,EAAb,kBAHM,OAGpBM,EAHoB,6GAQTA,EAAMC,KAAKD,MARF,kGAAH,qDAURE,EAAW,uCAAG,WAAOC,GAAP,eAAAN,EAAA,+EAGVC,IAAMC,IAAN,UAAaL,EAAb,qBAA6BS,IAHnB,OAGvBC,EAHuB,6GAOZA,EAAKH,KAAKG,KAPE,kGAAH,sDASXC,EAAa,uCAAG,WAAOF,EAAQG,GAAf,mBAAAT,EAAA,6DAEnBU,EAAmBD,EAAnBC,SAAUC,EAASF,EAATE,KAFS,kBAIZV,IAAMM,KAAN,UAAcV,EAAd,qBAA8BS,EAA9B,YAAgD,CAC3DI,WACAC,SANuB,OAIzBJ,EAJyB,+GAWdA,EAAKH,KAXS,kGAAH,wDAabQ,EAAa,uCAAG,WAAON,EAAQO,EAAWC,GAA1B,iBAAAd,EAAA,6DACnBe,EAAUD,EAAVC,MADmB,kBAIZd,IAAMe,OAAN,UAAgBnB,EAAhB,qBAAgCS,EAAhC,YAA0CO,GAAa,CAClEI,QAAS,CACPC,cAAc,UAAD,OAAYH,MANJ,OAIzBX,EAJyB,uHAYpBA,GAZoB,yDAAH,0DAebe,EAAW,uCAAG,WAAOL,GAAP,iBAAAd,EAAA,yDACjBU,EAAuBI,EAAvBJ,SAAUU,EAAaN,EAAbM,SADO,SAIlBV,GAAaU,EAJK,sBAKfC,MAAM,4BALS,uBAOVpB,IAAMM,KAAN,UAAcV,EAAd,cAA+B,CAC1Ca,WACAU,aATqB,gKAAH,sDAeXE,EAAU,uCAAG,WAAOR,EAAMP,EAAMgB,GAAnB,uBAAAvB,EAAA,yDAChBU,EAAoBI,EAApBJ,SAAUK,EAAUD,EAAVC,MACVJ,EAAoBJ,EAApBI,KAAMa,EAAcjB,EAAdiB,MAAOC,EAAOlB,EAAPkB,GAFG,SAIjBd,GAASa,GAAUC,EAJF,sBAKdJ,MAAM,sCALQ,uBAOTpB,IAAMyB,IAAN,UACR7B,EADQ,qBACQ4B,GACnB,CACEd,KAAMgB,mBAAmBhB,GACzBa,QACAI,OAAQlB,EACRmB,UAAWN,GAEb,CACEN,QAAS,CACPC,cAAc,UAAD,OAAYH,MAjBT,mKAAH,0DAyBVe,EAAU,uCAAG,WAAOhB,EAAMP,EAAMgB,GAAnB,qBAAAvB,EAAA,yDAChBU,EAAoBI,EAApBJ,SAAUK,EAAUD,EAAVC,MACVJ,EAAgBJ,EAAhBI,KAAMa,EAAUjB,EAAViB,MAFU,SAIjBb,GAASa,EAJQ,sBAKdH,MAAM,sCALQ,uBAOTpB,IAAMM,KAAN,UACRV,EADQ,aAEX,CACEc,KAAMgB,mBAAmBhB,GACzBa,QACAI,OAAQlB,EACRmB,UAAWN,GAEb,CACEN,QAAS,CACPC,cAAc,UAAD,OAAYH,MAjBT,mKAAH,0DAyBVgB,EAAU,uCAAG,WAAOjB,EAAMR,GAAb,eAAAN,EAAA,6DAChBe,EAAUD,EAAVC,MADgB,kBAGTd,IAAMe,OAAN,UAAgBnB,EAAhB,qBAAgCS,GAAU,CACrDW,QAAS,CACPC,cAAc,UAAD,OAAYH,MALP,gKAAH,yD,2HCrHViB,EAAUC,IAAOC,QAAV,+4BAOT,qBAAGC,MAAkBC,aACV,qBAAGD,MAAkBE,WAEtB,qBAAGF,MAAkBG,eAKhB,qBAAGH,MAAkBI,cAChC,qBAAGJ,MAAkBK,cASvB,qBAAGL,MAAkBK,cAKR,qBAAGL,MAAkBI,cAChC,qBAAGJ,MAAkBK,cAYvBC,EAASR,IAAOS,OAAV,wYAUG,qBAAGP,MAAkBE,WACpB,qBAAGF,MAAkBQ,eACjC,qBAAGR,MAAkBQ,eAEnB,qBAAGR,MAAkBE,WACV,qBAAGF,MAAkBQ,gB,qNCnD9B,SAASC,IACtB,IAAQnB,EAAOoB,cAAPpB,GACR,EAA0BqB,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOtB,EAAP,KAAcyB,EAAd,KACA,EAAkCH,mBAAS,IAA3C,mBAAOjB,EAAP,KAAkBqB,EAAlB,KACMpC,EAAOqC,cAEPC,EAAUC,cAChBC,qBAAU,WAAM,4CAId,4BAAAtD,EAAA,sEACsBK,YAAYoB,GADlC,OACM8B,EADN,OAGEP,EAASQ,mBAAmBD,EAAQ5C,OACpCsC,EAASM,EAAQ/B,OACjB0B,EAAaK,EAAQ1B,WALvB,4CAJc,sBACVJ,GADU,mCAEZgC,KASD,CAAChC,IAEJ,IAIMiC,EAAY,uCAAG,8BAAA1D,EAAA,sDACfuB,EAAMM,EAENkB,GAASvB,IACLb,EAAOoC,EACbY,QAAQC,IAAI,CAAEjD,SACJ,MAANc,EACFK,YAAWhB,EAAM,CAAEU,QAAOb,QAAQY,GAAKsC,MAAK,SAACC,GAC3CV,EAAQW,KAAR,gBAAsBD,EAAI1D,KAAKG,KAAKyD,SAGtC1C,YAAWR,EAAM,CAAEU,QAAOb,OAAMc,MAAMF,GAAKsC,MAAK,WAC9CT,EAAQW,KAAR,gBAAsBtC,QAZT,2CAAH,qDAkBlB,OACE,eAAC,IAAD,WACE,sDACA,uBAAOwC,QAAQ,QAAf,SACE,uBACEC,KAAK,OACLC,YAAY,QACZC,KAAK,QACLrB,MAAOvB,EACP6C,SAAU,SAACC,GACTrB,EAASqB,EAAEC,OAAOxB,YAKxB,cAAC,IAAD,CAAWA,MAAOA,EAAOsB,SArCZ,SAACtB,GAChBC,EAASD,MAsCP,uBAAOkB,QAAQ,oBAAf,SACE,uBACEC,KAAK,OACLC,YAAY,OACZC,KAAK,oBACLrB,MAAOlB,EACPwC,SAAU,SAACC,GACTpB,EAAaoB,EAAEC,OAAOxB,YAI5B,cAAC,IAAD,CAAQyB,QAASd,EAAjB","file":"static/js/8.8923d0c3.chunk.js","sourcesContent":["import axios from \"axios\";\nexport const url =\n  process.env.NODE_ENV === \"production\"\n    ? process.env.REACT_APP_API_URL\n    : \"http://localhost:8080\";\n\nexport const getPosts = async () => {\n  let posts;\n  try {\n    posts = await axios.get(`${url}/api/post/all`);\n  } catch (error) {\n    return error;\n  }\n\n  return await posts.data.posts;\n};\nexport const getPostByID = async (postID) => {\n  let post;\n  try {\n    post = await axios.get(`${url}/api/post/${postID}`);\n  } catch (error) {\n    return error;\n  }\n  return await post.data.post;\n};\nexport const createComment = async (postID, comment) => {\n  let post;\n  const { username, body } = comment;\n  try {\n    post = await axios.post(`${url}/api/post/${postID}/comment`, {\n      username,\n      body,\n    });\n  } catch (error) {\n    return error;\n  }\n  return await post.data;\n};\nexport const deleteComment = async (postID, commentID, user) => {\n  const { token } = user;\n  let data;\n  try {\n    data = await axios.delete(`${url}/api/post/${postID}/${commentID}`, {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  } catch (error) {\n    return error;\n  }\n  return data;\n};\n\nexport const handleLogin = async (user) => {\n  const { username, password } = user;\n\n  try {\n    if (!username || !password) {\n      throw Error(\"Fill in your Credentials\");\n    }\n    return await axios.post(`${url}/api/login`, {\n      username,\n      password,\n    });\n  } catch (error) {\n    return error;\n  }\n};\nexport const updatePost = async (user, post, img) => {\n  const { username, token } = user;\n  const { body, title, id } = post;\n  try {\n    if (!body || !title || !id) {\n      throw Error(\"Fill in Title and Body of the Post\");\n    }\n    return await axios.put(\n      `${url}/api/post/${id}`,\n      {\n        body: encodeURIComponent(body),\n        title,\n        author: username,\n        thumbnail: img,\n      },\n      {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  } catch (error) {\n    return error;\n  }\n};\nexport const createPost = async (user, post, img) => {\n  const { username, token } = user;\n  const { body, title } = post;\n  try {\n    if (!body || !title) {\n      throw Error(\"Fill in Title and Body of the Post\");\n    }\n    return await axios.post(\n      `${url}/api/post`,\n      {\n        body: encodeURIComponent(body),\n        title,\n        author: username,\n        thumbnail: img,\n      },\n      {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  } catch (error) {\n    return error;\n  }\n};\nexport const deletePost = async (user, postID) => {\n  const { token } = user;\n  try {\n    return await axios.delete(`${url}/api/post/${postID}`, {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const uploadThumbnail = async (file) => {\n  let formData = new FormData();\n  formData.append(\"thumbnail\", file);\n  try {\n    return await axios.patch(`${url}/api/images/upload`, formData);\n  } catch (error) {\n    return error;\n  }\n};\n","import styled from \"styled-components\";\nexport const Wrapper = styled.section`\n  width: clamp(45%, 680px, 92%);\n  margin: 2.5rem auto;\n  display: grid;\n  padding: min(3.5%, 1.5rem);\n  border-radius: 1rem;\n  //Color and Styles\n  color: ${({ theme }) => theme.mainColor};\n  background-color: ${({ theme }) => theme.bgColor};\n  font-size: 1.25rem;\n  box-shadow: rgba(${({ theme }) => theme.shadowColor}, 0.08) 1em 2em 3.5em 0px;\n  .EasyMDEContainer {\n    box-sizing: border-box;\n    margin-bottom: 1rem;\n    * {\n      background-color: ${({ theme }) => theme.blockColor};\n      color: ${({ theme }) => theme.titleColor};\n      border-color: none;\n    }\n    .editor-toolbar {\n    }\n  }\n  h3 {\n    margin: 0 auto;\n    margin-bottom: min(3.5%, 1.5rem);\n    color: ${({ theme }) => theme.titleColor};\n  }\n  label {\n    input {\n      box-sizing: border-box;\n      background-color: ${({ theme }) => theme.blockColor};\n      color: ${({ theme }) => theme.titleColor};\n      padding: 0.85rem 0;\n      padding-inline: 1rem;\n      border-radius: 1rem;\n      border: none;\n      width: 100%;\n      margin-bottom: 1.5em;\n      font-size: 1.5rem;\n      font-weight: 600;\n    }\n  }\n`;\nexport const Submit = styled.button`\n  border-radius: 1rem;\n  border: none;\n  min-width: 20%;\n  padding: 0.85rem 0.65rem;\n  font-family: inherit;\n  font-weight: 800;\n  font-size: 1.05rem;\n  margin: 0 auto;\n  margin-top: min(3.5%, 1.5rem);\n  background-color: ${({ theme }) => theme.bgColor};\n  outline: 2px solid ${({ theme }) => theme.accentColor};\n  color: ${({ theme }) => theme.accentColor};\n  &:hover {\n    color: ${({ theme }) => theme.bgColor};\n    background-color: ${({ theme }) => theme.accentColor};\n    cursor: pointer;\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nimport { createPost, getPostByID, updatePost } from \"../../helpers/api\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Wrapper, Submit } from \"./PostMDE.styles\";\nimport useUserContext from \"../../constants/useUserContext\";\n\nexport default function PostMDE() {\n  const { id } = useParams();\n  const [value, setValue] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [thumbnail, setThumbnail] = useState(\"\");\n  const user = useUserContext();\n\n  const history = useHistory();\n  useEffect(() => {\n    if (id) {\n      setup();\n    }\n    async function setup() {\n      let results = await getPostByID(id);\n\n      setValue(decodeURIComponent(results.body));\n      setTitle(results.title);\n      setThumbnail(results.thumbnail);\n    }\n  }, [id]);\n\n  const onChange = (value) => {\n    setValue(value);\n  };\n\n  const handleSubmit = async () => {\n    let img = thumbnail;\n\n    if (value && title) {\n      const body = value;\n      console.log({ body });\n      if (id == null) {\n        createPost(user, { title, body }, img).then((res) => {\n          history.push(`/post/${res.data.post._id}`);\n        });\n      } else {\n        updatePost(user, { title, body, id }, img).then(() => {\n          history.push(`/post/${id}`);\n        });\n      }\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h3>What's on your mind?</h3>\n      <label htmlFor=\"title\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          name=\"title\"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n          }}\n        ></input>\n      </label>\n\n      <SimpleMDE value={value} onChange={onChange} />\n      {/* <Thumbnail fileInput={fileInput} /> */}\n      <label htmlFor=\"current-thumbnail\">\n        <input\n          type=\"text\"\n          placeholder=\"Link\"\n          name=\"current-thumbnail\"\n          value={thumbnail}\n          onChange={(e) => {\n            setThumbnail(e.target.value);\n          }}\n        ></input>\n      </label>\n      <Submit onClick={handleSubmit}>Post</Submit>\n    </Wrapper>\n  );\n}\n"],"sourceRoot":""}