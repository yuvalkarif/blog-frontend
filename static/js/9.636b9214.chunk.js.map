{"version":3,"sources":["components/PostMDE/PostMDE.styles.js","components/PostMDE/index.js","helpers/api.js"],"names":["Wrapper","styled","section","theme","mainColor","bgColor","shadowColor","blockColor","titleColor","Submit","button","accentColor","PostMDE","user","id","useParams","useState","value","setValue","title","setTitle","thumbnail","setThumbnail","history","useHistory","useEffect","a","getPostByID","results","decodeURIComponent","body","setup","handleSubmit","img","console","log","createPost","then","res","push","data","post","_id","updatePost","htmlFor","type","placeholder","name","onChange","e","target","onClick","url","process","getPosts","axios","get","posts","postID","createComment","comment","username","deleteComment","commentID","token","delete","headers","authorization","handleLogin","password","Error","put","encodeURIComponent","author","deletePost"],"mappings":"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","file":"static/js/9.636b9214.chunk.js","sourcesContent":["import styled from \"styled-components\";\nexport const Wrapper = styled.section`\n  width: clamp(45%, 680px, 92%);\n  margin: 2.5rem auto;\n  display: grid;\n  padding: min(3.5%, 1.5rem);\n  border-radius: 1rem;\n  //Color and Styles\n  color: ${({ theme }) => theme.mainColor};\n  background-color: ${({ theme }) => theme.bgColor};\n  font-size: 1.25rem;\n  box-shadow: rgba(${({ theme }) => theme.shadowColor}, 0.08) 1em 2em 3.5em 0px;\n  .EasyMDEContainer {\n    box-sizing: border-box;\n    margin-bottom: 1rem;\n    * {\n      background-color: ${({ theme }) => theme.blockColor};\n      color: ${({ theme }) => theme.titleColor};\n      border-color: none;\n    }\n    .editor-toolbar {\n    }\n  }\n  h3 {\n    margin: 0 auto;\n    margin-bottom: min(3.5%, 1.5rem);\n    color: ${({ theme }) => theme.titleColor};\n  }\n  label {\n    input {\n      box-sizing: border-box;\n      background-color: ${({ theme }) => theme.blockColor};\n      color: ${({ theme }) => theme.titleColor};\n      padding: 0.85rem 0;\n      padding-inline: 1rem;\n      border-radius: 1rem;\n      border: none;\n      width: 100%;\n      margin-bottom: 1.5em;\n      font-size: 1.5rem;\n      font-weight: 600;\n    }\n  }\n`;\nexport const Submit = styled.button`\n  border-radius: 1rem;\n  border: none;\n  min-width: 20%;\n  padding: 0.85rem 0.65rem;\n  font-family: inherit;\n  font-weight: 800;\n  font-size: 1.05rem;\n  margin: 0 auto;\n  margin-top: min(3.5%, 1.5rem);\n  background-color: ${({ theme }) => theme.bgColor};\n  outline: 2px solid ${({ theme }) => theme.accentColor};\n  color: ${({ theme }) => theme.accentColor};\n  &:hover {\n    color: ${({ theme }) => theme.bgColor};\n    background-color: ${({ theme }) => theme.accentColor};\n    cursor: pointer;\n  }\n`;\n","import { useState, useEffect } from \"react\";\nimport SimpleMDE from \"react-simplemde-editor\";\nimport \"easymde/dist/easymde.min.css\";\nimport { createPost, getPostByID, updatePost } from \"../../helpers/api\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Wrapper, Submit } from \"./PostMDE.styles\";\n\nexport default function PostMDE({ user }) {\n  const { id } = useParams();\n  const [value, setValue] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [thumbnail, setThumbnail] = useState(\"\");\n\n  const history = useHistory();\n  useEffect(() => {\n    if (id) {\n      setup();\n    }\n    async function setup() {\n      let results = await getPostByID(id);\n\n      setValue(decodeURIComponent(results.body));\n      setTitle(results.title);\n      setThumbnail(results.thumbnail);\n    }\n  }, [id]);\n\n  const onChange = (value) => {\n    setValue(value);\n  };\n\n  const handleSubmit = async () => {\n    let img = thumbnail;\n\n    if (value && title) {\n      const body = value;\n      console.log({ body });\n      if (id == null) {\n        createPost(user, { title, body }, img).then((res) => {\n          history.push(`/post/${res.data.post._id}`);\n        });\n      } else {\n        updatePost(user, { title, body, id }, img).then(() => {\n          history.push(`/post/${id}`);\n        });\n      }\n    }\n  };\n\n  return (\n    <Wrapper>\n      <h3>What's on your mind?</h3>\n      <label htmlFor=\"title\">\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          name=\"title\"\n          value={title}\n          onChange={(e) => {\n            setTitle(e.target.value);\n          }}\n        ></input>\n      </label>\n\n      <SimpleMDE value={value} onChange={onChange} />\n      {/* <Thumbnail fileInput={fileInput} /> */}\n      <label htmlFor=\"current-thumbnail\">\n        <input\n          type=\"text\"\n          placeholder=\"Link\"\n          name=\"current-thumbnail\"\n          value={thumbnail}\n          onChange={(e) => {\n            setThumbnail(e.target.value);\n          }}\n        ></input>\n      </label>\n      <Submit onClick={handleSubmit}>Post</Submit>\n    </Wrapper>\n  );\n}\n","import axios from \"axios\";\nexport const url = process.env.REACT_APP_API_URL;\nexport const getPosts = async () => {\n  let posts;\n  try {\n    posts = await axios.get(`${url}/api/post/all`);\n  } catch (error) {\n    return error;\n  }\n\n  return await posts.data.posts;\n};\nexport const getPostByID = async (postID) => {\n  let post;\n  try {\n    post = await axios.get(`${url}/api/post/${postID}`);\n  } catch (error) {\n    return error;\n  }\n  return await post.data.post;\n};\nexport const createComment = async (postID, comment) => {\n  let post;\n  const { username, body } = comment;\n  try {\n    post = await axios.post(`${url}/api/post/${postID}/comment`, {\n      username,\n      body,\n    });\n  } catch (error) {\n    return error;\n  }\n  return await post.data;\n};\nexport const deleteComment = async (postID, commentID, user) => {\n  const { token } = user;\n  let data;\n  try {\n    data = await axios.delete(`${url}/api/post/${postID}/${commentID}`, {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  } catch (error) {\n    return error;\n  }\n  return data;\n};\n\nexport const handleLogin = async (user) => {\n  const { username, password } = user;\n\n  try {\n    if (!username || !password) {\n      throw Error(\"Fill in your Credentials\");\n    }\n    return await axios.post(`${url}/api/login`, {\n      username,\n      password,\n    });\n  } catch (error) {\n    return error;\n  }\n};\nexport const updatePost = async (user, post, img) => {\n  const { username, token } = user;\n  const { body, title, id } = post;\n  try {\n    if (!body || !title || !id) {\n      throw Error(\"Fill in Title and Body of the Post\");\n    }\n    return await axios.put(\n      `${url}/api/post/${id}`,\n      {\n        body: encodeURIComponent(body),\n        title,\n        author: username,\n        thumbnail: img,\n      },\n      {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  } catch (error) {\n    return error;\n  }\n};\nexport const createPost = async (user, post, img) => {\n  const { username, token } = user;\n  const { body, title } = post;\n  try {\n    if (!body || !title) {\n      throw Error(\"Fill in Title and Body of the Post\");\n    }\n    return await axios.post(\n      `${url}/api/post`,\n      {\n        body: encodeURIComponent(body),\n        title,\n        author: username,\n        thumbnail: img,\n      },\n      {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      }\n    );\n  } catch (error) {\n    return error;\n  }\n};\nexport const deletePost = async (user, postID) => {\n  const { token } = user;\n  try {\n    return await axios.delete(`${url}/api/post/${postID}`, {\n      headers: {\n        authorization: `Bearer ${token}`,\n      },\n    });\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const uploadThumbnail = async (file) => {\n  let formData = new FormData();\n  formData.append(\"thumbnail\", file);\n  try {\n    return await axios.patch(`${url}/api/images/upload`, formData);\n  } catch (error) {\n    return error;\n  }\n};\n"],"sourceRoot":""}