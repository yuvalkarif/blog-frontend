{"version":3,"sources":["constants/darkTheme.js","constants/lightTheme.js","components/Header/Header.styles.js","components/Header/index.js","App.js","misc/reportWebVitals.js","index.js","constants/userContext.js","constants/useUserContext.js","components/Loading/Loading.styles.js","components/Loading/index.js"],"names":["Theme","accentColor","bgColor","blockColor","titleColor","mainColor","shadowColor","accentColorRGB","redColor","rgbBgColor","Wrapper","styled","header","theme","Container","div","Header","setUser","setIsDarkMode","isDarkMode","history","useHistory","user","useUserContext","onClick","push","username","token","className","localStorage","clear","onChange","checked","size","App","PostPage","lazy","PostAdd","PostMDE","Feed","Login","useState","useEffect","loggedInUser","getItem","loggedInToken","foundUser","JSON","parse","Provider","value","darkTheme","lightTheme","GlobalStyle","basename","fallback","Loading","exact","path","to","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","UserContext","React","createContext","useContext","src"],"mappings":"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","file":"static/js/main.0a9b095b.chunk.js","sourcesContent":["const Theme = {\n  accentColor: \"#f32e4d\",\n  bgColor: \"#000\",\n  blockColor: \"#1d1c26\",\n  titleColor: \"#fff\",\n  mainColor: \"#515263\",\n  shadowColor: \"62, 71, 86\",\n  accentColorRGB: \"83,116,255\",\n  redColor: \"#ffc75c\",\n  rgbBgColor: \"0,0,0\",\n};\n\nexport default Theme;\n","const Theme = {\n  accentColor: \"#5374FF\",\n  bgColor: \"#FFFFFF\",\n  blockColor: \"#E8EAEE\",\n  titleColor: \"#000\",\n  mainColor: \"#515263\",\n  shadowColor: \"62, 71, 86\",\n  accentColorRGB: \"83,116,255\",\n  redColor: \"#FF4332\",\n  rgbBgColor: \"255,255,255\",\n};\n\nexport default Theme;\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.header`\n  border-radius: 0rem 0rem 1rem 1rem;\n  //Color and Styles\n  color: ${({ theme }) => theme.mainColor};\n  background-color: ${({ theme }) => theme.bgColor};\n  @media (min-width: 960px) {\n    font-size: 1.25rem;\n  }\n  padding: min(1rem, 2vw);\n  font-size: 0.8rem;\n  box-shadow: rgba(${({ theme }) => theme.shadowColor}, 0.08) 1em 2em 3.5em 0px;\n`;\n\nexport const Container = styled.div`\n  width: clamp(33vw, 980px, 90%);\n  margin: 0 auto;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  color: ${({ theme }) => theme.titleColor};\n  .toggle {\n    margin-top: 0.6em;\n    overflow: visible !important;\n    align-self: center;\n  }\n  h1 {\n    margin: 0;\n  }\n  & > div {\n    display: flex;\n    align-items: center;\n  }\n  .logout {\n    ::after {\n      background: ${({ theme }) => theme.redColor};\n    }\n  }\n  span {\n    font-weight: 600;\n    position: relative;\n    padding-top: 0.2em;\n    margin: 0 0.5em;\n    display: inline-block;\n\n    ::after {\n      content: \"\";\n      display: block;\n      width: 0;\n      height: 0.15em;\n      background: ${({ theme }) => theme.accentColor};\n      border-radius: 1rem;\n      transition: width 0.3s;\n    }\n\n    &:hover {\n      cursor: pointer;\n      &::after {\n        width: 100%;\n      }\n    }\n  }\n`;\n","import { Container, Wrapper } from \"./Header.styles\";\nimport { useHistory } from \"react-router\";\nimport DarkModeToggle from \"react-dark-mode-toggle\";\nimport useUserContext from \"../../constants/useUserContext\";\nexport default function Header({ setUser, setIsDarkMode, isDarkMode }) {\n  const history = useHistory();\n  const user = useUserContext();\n  const goToFeed = () => {\n    history.push(`/`);\n  };\n  const goToAdmin = () => {\n    history.push(`/admin`);\n  };\n  function handleLogOut() {\n    setUser({ username: \"\", token: \"\" });\n    localStorage.clear();\n  }\n  return (\n    <Wrapper>\n      <Container>\n        <h1>Blog by Karif</h1>\n        <div>\n          {\" \"}\n          <span onClick={goToFeed}>Feed</span>\n          <span onClick={goToAdmin}>Admin</span>\n          {user?.username && user?.token && (\n            <span className=\"logout\" onClick={() => handleLogOut()}>\n              Log Out\n            </span>\n          )}\n          <DarkModeToggle\n            className=\"toggle\"\n            onChange={setIsDarkMode}\n            checked={isDarkMode}\n            size={50}\n          />\n        </div>\n      </Container>\n    </Wrapper>\n  );\n}\n","import { lazy, Suspense, useState, useEffect } from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport darkTheme from \"./constants/darkTheme\";\nimport lightTheme from \"./constants/lightTheme\";\nimport Loading from \"./components/Loading\";\nimport { createGlobalStyle } from \"styled-components\";\nimport UserContext from \"./constants/userContext\";\nimport Header from \"./components/Header/index\";\n\nfunction App() {\n  const PostPage = lazy(() => import(\"./components/PostPage\"));\n  const PostAdd = lazy(() => import(\"./components/PostAdd\"));\n  const PostMDE = lazy(() => import(\"./components/PostMDE\"));\n  const Feed = lazy(() => import(\"./components/Feed\"));\n  const Login = lazy(() => import(\"./components/Login\"));\n\n  const [user, setUser] = useState({ username: \"\", token: \"\" });\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    const loggedInToken = localStorage.getItem(\"token\");\n\n    if (loggedInUser && loggedInToken) {\n      const foundUser = {\n        username: JSON.parse(loggedInUser),\n        token: JSON.parse(loggedInToken),\n      };\n      setUser(foundUser);\n    }\n  }, []);\n\n  return (\n    <UserContext.Provider value={user}>\n      <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Router basename={\"\"}>\n          <Header\n            setUser={setUser}\n            setIsDarkMode={setIsDarkMode}\n            isDarkMode={isDarkMode}\n          />\n          <Switch>\n            <Suspense fallback={<Loading />}>\n              <Route exact path=\"/\">\n                <Feed />\n              </Route>\n              <Route path=\"/post/:id/edit\">\n                <PostMDE />\n              </Route>\n              <Route exact path=\"/post/:id\">\n                <PostPage />\n              </Route>\n              <Route exact path=\"/edit\">\n                <PostAdd />\n              </Route>\n              <Route exact path=\"/admin\">\n                {user?.username || user?.token ? (\n                  <PostMDE />\n                ) : (\n                  <Redirect to=\"/login\" />\n                )}\n              </Route>\n              <Route exact path=\"/login\">\n                <Login setUser={setUser} />\n              </Route>\n            </Suspense>\n          </Switch>\n        </Router>\n      </ThemeProvider>\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n\nconst GlobalStyle = createGlobalStyle`\n  *{\n    transition: color 150ms ease-in-out; \n    transition: background-color 150ms ease-in-out; \n  }\n  body {\n    background-color:${({ theme }) => theme.blockColor};\n    h1{\n      font-size: 1rem ;\n      @media (min-width: 960px) {\n        font-size: 2.5rem ;\n      }\n    }\n    h2{\n      font-size: 1.25rem ;\n      @media (min-width: 960px) {\n        font-size: 2.75rem ;\n      }\n    }\n    .body{\n      *{\n        @media (min-width: 960px) {\n        font-size: 1.35rem;\n      }\n      }\n    \n    }\n  }`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"es6-shim\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize-package-data\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./misc/reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import React from \"react\";\nconst UserContext = React.createContext();\nexport default UserContext;\n","import { useContext } from \"react\";\nimport UserContext from \"./userContext\";\n\nconst useUserContext = () => {\n  const { user } = useContext(UserContext);\n  return user;\n};\n\nexport default useUserContext;\n","import styled from \"styled-components\";\nexport const Wrapper = styled.div`\n  /* margin: auto; */\n\n  display: grid;\n  place-content: center;\n`;\n","import InlineSVG from \"svg-inline-react\";\nimport { Wrapper } from \"./Loading.styles\";\n\nexport default function Loading() {\n  const svgSource = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"margin: auto; background: rgba(0, 0, 0, 0) none repeat scroll 0% 0%; display: block; shape-rendering: auto;\" width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n    <circle cx=\"30\" cy=\"50\" fill=\"#2aa7c9\" r=\"20\">\n      <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1111111111111112s\" keyTimes=\"0;0.5;1\" values=\"30;70;30\" begin=\"-0.5555555555555556s\"></animate>\n    </circle>\n    <circle cx=\"70\" cy=\"50\" fill=\"#f91a10\" r=\"20\">\n      <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1111111111111112s\" keyTimes=\"0;0.5;1\" values=\"30;70;30\" begin=\"0s\"></animate>\n    </circle>\n    <circle cx=\"30\" cy=\"50\" fill=\"#2aa7c9\" r=\"20\">\n      <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1111111111111112s\" keyTimes=\"0;0.5;1\" values=\"30;70;30\" begin=\"-0.5555555555555556s\"></animate>\n      <animate attributeName=\"fill-opacity\" values=\"0;0;1;1\" calcMode=\"discrete\" keyTimes=\"0;0.499;0.5;1\" dur=\"1.1111111111111112s\" repeatCount=\"indefinite\"></animate>\n    </circle>\n   </svg>`;\n  return (\n    <Wrapper>\n      <InlineSVG src={svgSource}></InlineSVG>\n    </Wrapper>\n  );\n}\n"],"sourceRoot":""}