{"version":3,"sources":["components/Loading/index.js","constants/darkTheme.js","constants/lightTheme.js","App.js","misc/reportWebVitals.js","index.js"],"names":["Loading","src","Theme","accentColor","bgColor","blockColor","titleColor","mainColor","shadowColor","accentColorRGB","redColor","rgbBgColor","App","PostPage","lazy","PostAdd","PostMDE","Feed","Login","Header","useState","username","token","user","setUser","isDarkMode","setIsDarkMode","useEffect","loggedInUser","localStorage","getItem","loggedInToken","foundUser","JSON","parse","basename","theme","darkTheme","lightTheme","GlobalStyle","to","fallback","exact","path","createGlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qHAAA,8DAEe,SAASA,IActB,OACE,mCACE,cAAC,IAAD,CAAWC,IAfA,kqC,8JCSFC,EAZD,CACZC,YAAa,UACbC,QAAS,OACTC,WAAY,UACZC,WAAY,OACZC,UAAW,UACXC,YAAa,aACbC,eAAgB,aAChBC,SAAU,UACVC,WAAY,SCGCT,EAZD,CACZC,YAAa,UACbC,QAAS,UACTC,WAAY,UACZC,WAAY,OACZC,UAAW,UACXC,YAAa,aACbC,eAAgB,aAChBC,SAAU,UACVC,WAAY,e,eCmECC,MA/Df,WACE,IAAMC,EAAWC,gBAAK,kBAAM,+DACtBC,EAAUD,gBAAK,kBAAM,wDACrBE,EAAUF,gBAAK,kBAAM,8DACrBG,EAAOH,gBAAK,kBAAM,uDAClBI,EAAQJ,gBAAK,kBAAM,uDACnBK,EAASL,gBAAK,kBAAM,wDAC1B,EAAwBM,mBAAS,CAAEC,SAAU,GAAIC,MAAO,KAAxD,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAoCJ,oBAAS,kBAAM,KAAnD,mBAAOK,EAAP,KAAmBC,EAAnB,KAYA,OAXAC,qBAAU,WACR,IAAMC,EAAeC,aAAaC,QAAQ,QACpCC,EAAgBF,aAAaC,QAAQ,SAC3C,GAAIF,GAAgBG,EAAe,CACjC,IAAMC,EAAY,CAChBX,SAAUY,KAAKC,MAAMN,GACrBN,MAAOW,KAAKC,MAAMH,IAEpBP,EAAQQ,MAET,IAED,cAAC,IAAD,CAAQG,SAAU,QAAlB,SACE,eAAC,IAAD,CAAeC,MAAOX,EAAaY,EAAYC,EAA/C,UACE,cAACC,EAAD,IACA,cAAC,IAAD,CAAUC,GAAG,MACb,cAAC,IAAD,UACE,eAAC,WAAD,CAAUC,SAAU,cAACzC,EAAA,EAAD,IAApB,UACE,cAACmB,EAAD,CACEI,KAAMA,EACNC,QAASA,EACTE,cAAeA,EACfD,WAAYA,IAEd,cAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC1B,EAAD,CAAMM,KAAMA,MAEd,cAAC,IAAD,CAAOoB,KAAK,iBAAZ,SACE,cAAC3B,EAAD,CAASO,KAAMA,MAEjB,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,YAAlB,SACE,cAAC9B,EAAD,CAAUU,KAAMA,MAElB,cAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,QAAlB,SACE,cAAC5B,EAAD,MAEF,cAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,SAAlB,SACGpB,EAAKF,UAAYE,EAAKD,MAErB,cAACN,EAAD,CAASO,KAAMA,IAEf,cAAC,IAAD,CAAUiB,GAAG,aAGjB,cAAC,IAAD,CAAOE,OAAK,EAACC,KAAK,SAAlB,SACE,cAACzB,EAAD,CAAOM,QAASA,iBAWxBe,EAAcK,YAAH,maAEM,qBAAGR,MAAkB/B,cCpE7BwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.deba7aac.chunk.js","sourcesContent":["import InlineSVG from \"svg-inline-react\";\n\nexport default function Loading() {\n  const svgSource = `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"margin: auto; background: rgba(0, 0, 0, 0) none repeat scroll 0% 0%; display: block; shape-rendering: auto;\" width=\"200px\" height=\"200px\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\n    <circle cx=\"30\" cy=\"50\" fill=\"#2aa7c9\" r=\"20\">\n      <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1111111111111112s\" keyTimes=\"0;0.5;1\" values=\"30;70;30\" begin=\"-0.5555555555555556s\"></animate>\n    </circle>\n    <circle cx=\"70\" cy=\"50\" fill=\"#f91a10\" r=\"20\">\n      <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1111111111111112s\" keyTimes=\"0;0.5;1\" values=\"30;70;30\" begin=\"0s\"></animate>\n    </circle>\n    <circle cx=\"30\" cy=\"50\" fill=\"#2aa7c9\" r=\"20\">\n      <animate attributeName=\"cx\" repeatCount=\"indefinite\" dur=\"1.1111111111111112s\" keyTimes=\"0;0.5;1\" values=\"30;70;30\" begin=\"-0.5555555555555556s\"></animate>\n      <animate attributeName=\"fill-opacity\" values=\"0;0;1;1\" calcMode=\"discrete\" keyTimes=\"0;0.499;0.5;1\" dur=\"1.1111111111111112s\" repeatCount=\"indefinite\"></animate>\n    </circle>\n   </svg>`;\n  return (\n    <>\n      <InlineSVG src={svgSource}></InlineSVG>\n    </>\n  );\n}\n","const Theme = {\n  accentColor: \"#f32e4d\",\n  bgColor: \"#000\",\n  blockColor: \"#1d1c26\",\n  titleColor: \"#fff\",\n  mainColor: \"#515263\",\n  shadowColor: \"62, 71, 86\",\n  accentColorRGB: \"83,116,255\",\n  redColor: \"#ffc75c\",\n  rgbBgColor: \"0,0,0\",\n};\n\nexport default Theme;\n","const Theme = {\n  accentColor: \"#5374FF\",\n  bgColor: \"#FFFFFF\",\n  blockColor: \"#E8EAEE\",\n  titleColor: \"#000\",\n  mainColor: \"#515263\",\n  shadowColor: \"62, 71, 86\",\n  accentColorRGB: \"83,116,255\",\n  redColor: \"#FF4332\",\n  rgbBgColor: \"255,255,255\",\n};\n\nexport default Theme;\n","import { lazy, Suspense, useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { ThemeProvider } from \"styled-components\";\nimport darkTheme from \"./constants/darkTheme\";\nimport lightTheme from \"./constants/lightTheme\";\nimport Loading from \"./components/Loading\";\nimport { createGlobalStyle } from \"styled-components\";\n\nfunction App() {\n  const PostPage = lazy(() => import(\"./components/PostPage\"));\n  const PostAdd = lazy(() => import(\"./components/PostAdd\"));\n  const PostMDE = lazy(() => import(\"./components/PostMDE\"));\n  const Feed = lazy(() => import(\"./components/Feed\"));\n  const Login = lazy(() => import(\"./components/Login\"));\n  const Header = lazy(() => import(\"./components/Header\"));\n  const [user, setUser] = useState({ username: \"\", token: \"\" });\n  const [isDarkMode, setIsDarkMode] = useState(() => false);\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    const loggedInToken = localStorage.getItem(\"token\");\n    if (loggedInUser && loggedInToken) {\n      const foundUser = {\n        username: JSON.parse(loggedInUser),\n        token: JSON.parse(loggedInToken),\n      };\n      setUser(foundUser);\n    }\n  }, []);\n  return (\n    <Router basename={\"/view\"}>\n      <ThemeProvider theme={isDarkMode ? darkTheme : lightTheme}>\n        <GlobalStyle />\n        <Redirect to=\"/\" />\n        <Switch>\n          <Suspense fallback={<Loading />}>\n            <Header\n              user={user}\n              setUser={setUser}\n              setIsDarkMode={setIsDarkMode}\n              isDarkMode={isDarkMode}\n            />\n            <Route exact path=\"/\">\n              <Feed user={user} />\n            </Route>\n            <Route path=\"/post/:id/edit\">\n              <PostMDE user={user} />\n            </Route>\n            <Route exact path=\"/post/:id\">\n              <PostPage user={user} />\n            </Route>\n            <Route exact path=\"/edit\">\n              <PostAdd />\n            </Route>\n            <Route exact path=\"/admin\">\n              {user.username || user.token ? (\n                // <PostAdd user={user} />\n                <PostMDE user={user} />\n              ) : (\n                <Redirect to=\"/login\" />\n              )}\n            </Route>\n            <Route exact path=\"/login\">\n              <Login setUser={setUser} />\n            </Route>\n          </Suspense>\n        </Switch>\n      </ThemeProvider>\n    </Router>\n  );\n}\n\nexport default App;\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color:${({ theme }) => theme.blockColor};\n    h1{\n      font-size: 1rem ;\n      @media (min-width: 960px) {\n        font-size: 2.5rem ;\n      }\n    }\n    h2{\n      font-size: 1.25rem ;\n      @media (min-width: 960px) {\n        font-size: 2.75rem ;\n      }\n    }\n    .body{\n      *{\n        @media (min-width: 960px) {\n        font-size: 1.35rem;\n      }\n      }\n    \n    }\n  }`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"es6-shim\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize-package-data\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./misc/reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}